{% extends 'base2.html.twig' %}
{% block title %}Produits{% endblock %}

{% block body %}
<div class="container py-4">
  <h1 class="mb-3">Liste des produits</h1>

  {# --- Barre de recherche côté serveur (soumission auto) --- #}
  <div class="card mb-3">
    <div class="card-body">
      {% set current = app.request.attributes.get('_route') %}
      {% set actionRoute = (current starts with 'app_liste_produits_') ? current : 'app_liste_produits_index' %}

      <form id="search-form" method="get" action="{{ path(actionRoute) }}" class="row g-2">
        <div class="col-sm-4">
          <label for="q-ref" class="form-label mb-1">Référence (contient)</label>
          <input id="q-ref" name="ref" type="text" class="form-control" value="{{ f_ref }}" placeholder="ex: ABC123">
        </div>
        <div class="col-sm-6">
          <label for="q-des" class="form-label mb-1">Désignation (contient)</label>
          <input id="q-des" name="des" type="text" class="form-control" value="{{ f_des }}" placeholder="ex: VIS TFR M6">
        </div>
        <div class="col-sm-2">
          <label for="q-limit" class="form-label mb-1">Taille page</label>
          <select id="q-limit" name="limit" class="form-select">
            {% for n in [10,20,50,100] %}
              <option value="{{ n }}" {{ limit == n ? 'selected' : '' }}>{{ n }}</option>
            {% endfor %}
          </select>
        </div>

        {# tri & page conservés entre soumissions #}
        <input type="hidden" id="q-sort" name="sort" value="{{ sort }}">
        <input type="hidden" id="q-dir"  name="dir"  value="{{ dir }}">
        <input type="hidden" id="q-page" name="page" value="{{ page }}">
      </form>

      <div class="mt-2 text-muted small">
        Total : {{ total }} — page {{ page }}/{{ pages ?: 1 }}
      </div>
    </div>
  </div>

  {# --- Tableau --- #}
  <div class="table-responsive">
    <table class="table table-sm table-striped align-middle">
      <thead>
        {% set toggle = dir == 'ASC' ? 'DESC' : 'ASC' %}
        {% set base = app.request.query.all %}
        <tr>
          <th style="width:70px;">
            <a href="{{ path('app_liste_produits_index', base|merge({'sort':'id','dir': sort=='id' ? toggle : 'ASC'})) }}">
              ID{% if sort == 'id' %} ({{ dir }}){% endif %}
            </a>
          </th>
          <th>
            <a href="{{ path('app_liste_produits_index', base|merge({'sort':'ref','dir': sort=='ref' ? toggle : 'ASC'})) }}">
              Référence{% if sort == 'ref' %} ({{ dir }}){% endif %}
            </a>
          </th>
          <th>
            <a href="{{ path('app_liste_produits_index', base|merge({'sort':'des','dir': sort=='des' ? toggle : 'ASC'})) }}">
              Désignation{% if sort == 'des' %} ({{ dir }}){% endif %}
            </a>
          </th>
          <th>
            <a href="{{ path('app_liste_produits_index', base|merge({'sort':'uvEnStock','dir': sort=='uvEnStock' ? toggle : 'ASC'})) }}">
              UV en stock{% if sort == 'uvEnStock' %} ({{ dir }}){% endif %}
            </a>
          </th>
          <th>
            <a href="{{ path('app_liste_produits_index', base|merge({'sort':'seuilreapp','dir': sort=='seuilreapp' ? toggle : 'ASC'})) }}">
              Seuil réapp{% if sort == 'seuilreapp' %} ({{ dir }}){% endif %}
            </a>
          </th>
          <th>
            <a href="{{ path('app_liste_produits_index', base|merge({'sort':'pinkg','dir': sort=='pinkg' ? toggle : 'ASC'})) }}">
              Poids (kg){% if sort == 'pinkg' %} ({{ dir }}){% endif %}
            </a>
          </th>
          <th style="width:110px;">Actions</th>
        </tr>
      </thead>
      <tbody>
        {% for p in produits %}
          <tr>
            <td>{{ p.id }}</td>
            <td><code>{{ p.ref }}</code></td>
            <td>{{ p.des }}</td>
            <td>{{ p.uvEnStock }}</td>
            <td>{{ p.seuilreapp }}</td>
            <td>{{ p.pinkg }}</td>
            <td>
              <a class="btn btn-sm btn-outline-primary" href="{{ path('app_liste_produits_show', {id: p.id}) }}">Voir</a>
            </td>
          </tr>
        {% else %}
          <tr><td colspan="7" class="text-center text-muted">Aucun résultat</td></tr>
        {% endfor %}
      </tbody>
    </table>
  </div>

  {# --- Pagination (préserve filtres & tri) --- #}
  {% if pages > 1 %}
    {% set q = app.request.query.all %}
    <nav aria-label="Pagination">
      <ul class="pagination">
        <li class="page-item {{ page == 1 ? 'disabled' }}">
          <a class="page-link" href="{{ path('app_liste_produits_index', q|merge({'page': 1})) }}">«</a>
        </li>
        <li class="page-item {{ page == 1 ? 'disabled' }}">
          <a class="page-link" href="{{ path('app_liste_produits_index', q|merge({'page': page - 1})) }}">Préc.</a>
        </li>
        {% for p in range(max(1, page-2), min(pages, page+2)) %}
          <li class="page-item {{ p == page ? 'active' }}">
            <a class="page-link" href="{{ path('app_liste_produits_index', q|merge({'page': p})) }}">{{ p }}</a>
          </li>
        {% endfor %}
        <li class="page-item {{ page == pages ? 'disabled' }}">
          <a class="page-link" href="{{ path('app_liste_produits_index', q|merge({'page': page + 1})) }}">Suiv.</a>
        </li>
        <li class="page-item {{ page == pages ? 'disabled' }}">
          <a class="page-link" href="{{ path('app_liste_produits_index', q|merge({'page': pages})) }}">»</a>
        </li>
      </ul>
    </nav>
  {% endif %}
</div>

{# --- Auto-submit au clavier (server-side search) --- #}
<script>
(function() {
  const form  = document.getElementById('search-form');
  const ref   = document.getElementById('q-ref');
  const des   = document.getElementById('q-des');
  const limit = document.getElementById('q-limit');
  const page  = document.getElementById('q-page');

  let lastSent = form.action + '?' + new URLSearchParams(new FormData(form)).toString();
  let timer;

  function submitDebounced() {
    clearTimeout(timer);
    timer = setTimeout(() => {
      // Revenir page 1 à chaque changement de filtre/limit
      if (page) page.value = '1';
      const qs = new URLSearchParams(new FormData(form)).toString();
      const url = form.action + '?' + qs;
      if (url !== lastSent) {
        lastSent = url;
        window.location.href = url; // reload (server-side filtering on whole table)
      }
    }, 300);
  }

  ref.addEventListener('input', submitDebounced);
  des.addEventListener('input', submitDebounced);
  limit.addEventListener('change', submitDebounced);

  form.addEventListener('submit', function(e) {
    e.preventDefault();
    submitDebounced();
  });
})();
</script>
{% endblock %}
