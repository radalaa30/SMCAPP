{% extends 'base2.html.twig' %}

{% block title %}Nouveau BL{% endblock %}

{% block stylesheets %}
<style>
    .new-bl-container {
        max-width: 900px;
        margin: 0 auto;
        padding: 20px 0;
    }
    .card {
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }
    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid rgba(0, 0, 0, 0.125);
        padding: 1rem 1.25rem;
    }
    .card-header h4 {
        margin: 0;
        font-weight: 600;
        color: #343a40;
    }
    .card-body {
        padding: 1.5rem;
    }
    .page-title {
        margin-bottom: 20px;
        color: #343a40;
        font-weight: 600;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    .btn-back {
        background-color: #6c757d;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 4px;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        font-weight: 500;
        transition: background-color 0.2s;
    }
    .btn-back:hover {
        background-color: #5a6268;
        color: white;
        text-decoration: none;
    }
    .btn-back i {
        margin-right: 0.5rem;
    }
    .action-buttons {
        display: flex;
        justify-content: space-between;
        margin-top: 1.5rem;
        padding-top: 1.5rem;
        border-top: 1px solid #e9ecef;
    }
    .btn-create {
        background-color: #28a745;
        color: white;
        padding: 0.5rem 1.5rem;
        border-radius: 4px;
        border: none;
        font-weight: 500;
        transition: background-color 0.2s;
    }
    .btn-create:hover {
        background-color: #218838;
    }
    .form-section {
        margin-bottom: 1.5rem;
    }
    .form-section-title {
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid #e9ecef;
        color: #495057;
    }
    .form-control:focus {
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }
    .form-group {
        margin-bottom: 1rem;
    }
    .form-group label {
        font-weight: 500;
        margin-bottom: 0.5rem;
        color: #495057;
    }
    .alert-success {
        background-color: #d4edda;
        border-color: #c3e6cb;
        color: #155724;
        padding: 0.75rem 1.25rem;
        border-radius: 0.25rem;
        margin-bottom: 1rem;
    }
    .alert-danger {
        background-color: #f8d7da;
        border-color: #f5c6cb;
        color: #721c24;
        padding: 0.75rem 1.25rem;
        border-radius: 0.25rem;
        margin-bottom: 1rem;
    }
    .loading-indicator {
        display: none;
        align-items: center;
        margin-left: 1rem;
    }
    .loading-indicator .spinner-border {
        width: 1rem;
        height: 1rem;
        margin-right: 0.5rem;
    }
    .help-tip {
        display: inline-block;
        margin-left: 0.5rem;
        color: #6c757d;
        cursor: pointer;
    }
    .help-tip:hover {
        color: #007bff;
    }
    .required-field label::after {
        content: " *";
        color: #dc3545;
    }
    .help-section {
        background-color: #f8f9fa;
        border-left: 4px solid #17a2b8;
        padding: 1rem;
        margin-bottom: 1.5rem;
        border-radius: 0 4px 4px 0;
    }
    .help-section h5 {
        color: #17a2b8;
        margin-bottom: 0.5rem;
    }
    .help-section ul {
        margin-bottom: 0;
        padding-left: 1.5rem;
    }
    
    /* ========== STYLES OPTIMISÉS POUR LE MENU DÉROULANT ========== */
    
    /* Container principal du sélecteur avec thème bleu/jaune */
    .bl-selector-container {
        background: linear-gradient(135deg, #e3f2fd 0%, #fff9c4 20%, #e3f2fd 100%);
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 30px;
        border: 3px solid #2196f3;
        box-shadow: 0 8px 25px rgba(33, 150, 243, 0.2);
        position: relative;
        /* SUPPRIMÉ: overflow: hidden; pour permettre au menu de s'afficher */
    }
    
    .bl-selector-container::before {
        content: '';
        position: absolute;
        top: -50%;
        right: -50%;
        width: 100%;
        height: 100%;
        background: radial-gradient(circle, rgba(255, 193, 7, 0.1) 0%, transparent 70%);
        pointer-events: none;
    }
    
    .bl-selector-title {
        font-weight: 700;
        color: #1976d2;
        margin-bottom: 18px;
        font-size: 1.2rem;
        display: flex;
        align-items: center;
        text-shadow: 1px 1px 2px rgba(255, 255, 255, 0.8);
    }
    
    .bl-count-badge {
        background: linear-gradient(45deg, #ffc107, #ff9800);
        color: #000;
        border-radius: 30px;
        padding: 8px 15px;
        font-size: 0.9rem;
        font-weight: 700;
        margin-left: 15px;
        box-shadow: 0 4px 12px rgba(255, 193, 7, 0.4);
        animation: bounce 1.5s ease-in-out infinite alternate;
        border: 2px solid #fff;
    }
    
    @keyframes bounce {
        0% { transform: translateY(0px) scale(1); }
        100% { transform: translateY(-3px) scale(1.02); }
    }
    
    /* Menu déroulant personnalisé */
    .custom-select-wrapper {
        position: relative;
        user-select: none;
        width: 100%;
        z-index: 1000; /* Z-index élevé pour s'assurer que le menu s'affiche au-dessus */
    }
    
    .custom-select {
        position: relative;
        display: flex;
        flex-direction: column;
        cursor: pointer;
    }
    
    .custom-select-trigger {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 15px 25px;
        font-size: 1.1rem;
        color: #1976d2;
        font-weight: 600;
        height: 60px;
        background: linear-gradient(135deg, #fff 0%, #f0f8ff 50%, #fff9e6 100%);
        border: 3px solid #2196f3;
        border-radius: 12px;
        box-shadow: 0 6px 20px rgba(33, 150, 243, 0.15);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .custom-select-trigger:hover {
        border-color: #ffc107;
        box-shadow: 0 8px 25px rgba(255, 193, 7, 0.3);
        transform: translateY(-2px);
    }
    
    .custom-select-trigger::after {
        content: '';
        width: 0;
        height: 0;
        border-left: 8px solid transparent;
        border-right: 8px solid transparent;
        border-top: 10px solid #2196f3;
        transition: all 0.3s ease;
        margin-left: 15px;
    }
    
    .custom-select.opened .custom-select-trigger::after {
        transform: rotate(180deg);
        border-top-color: #ffc107;
    }
    
    .custom-select.opened .custom-select-trigger {
        border-color: #ffc107;
        background: linear-gradient(135deg, #fff9e6 0%, #f0f8ff 50%, #fff 100%);
        border-radius: 12px 12px 0 0;
    }
    
    .custom-options {
        position: absolute;
        display: block;
        top: 100%;
        left: 0;
        right: 0;
        background: #fff;
        border: 3px solid #ffc107;
        border-top: none;
        border-radius: 0 0 12px 12px;
        box-shadow: 0 8px 25px rgba(255, 193, 7, 0.3);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        opacity: 0;
        visibility: hidden;
        pointer-events: none;
        z-index: 1001; /* Z-index très élevé pour être au-dessus de tout */
        max-height: 300px;
        overflow-y: auto;
        transform: translateY(-10px);
    }
    
    .custom-select.opened .custom-options {
        opacity: 1;
        visibility: visible;
        pointer-events: all;
        transform: translateY(0);
    }
    
    .custom-option {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 12px 25px;
        color: #333;
        border-bottom: 1px solid #f0f0f0;
        transition: all 0.2s ease;
        font-weight: 500;
        cursor: pointer;
    }
    
    .custom-option:last-of-type {
        border-bottom: none;
    }
    
    .custom-option:hover {
        background: linear-gradient(90deg, #e3f2fd 0%, #fff9c4 100%);
        color: #1976d2;
        padding-left: 30px;
        font-weight: 600;
    }
    
    .custom-option.selection {
        background: linear-gradient(90deg, #2196f3 0%, #ffc107 100%);
        color: #fff;
        font-weight: 700;
    }
    
    /* Styles spécifiques selon le type de client */
    .custom-option.client-ci9 {
        border-left: 6px solid #2196f3;
        background: linear-gradient(90deg, #e3f2fd 0%, #f8f9fa 100%);
    }
    
    .custom-option.client-ci9:hover {
        border-left-color: #1976d2;
        background: linear-gradient(90deg, #bbdefb 0%, #e3f2fd 100%);
        transform: translateX(5px);
    }
    
    .custom-option.client-other {
        border-left: 6px solid #ffc107;
        background: linear-gradient(90deg, #fff9c4 0%, #f8f9fa 100%);
    }
    
    .custom-option.client-other:hover {
        border-left-color: #ff9800;
        background: linear-gradient(90deg, #fff176 0%, #fff9c4 100%);
        transform: translateX(5px);
    }
    
    /* Style spécial pour les lignes contenant "machines" */
    .custom-option.has-machines {
        font-weight: 700 !important;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
        border-left-width: 8px !important;
        background: linear-gradient(90deg, #fff3cd 0%, #ffeaa7 100%) !important;
        color: #856404 !important;
    }
    
    .custom-option.has-machines:hover {
        background: linear-gradient(90deg, #ffeaa7 0%, #fdcb6e 100%) !important;
        color: #6c5400 !important;
        font-weight: 800 !important;
        transform: translateX(8px) scale(1.02);
    }
    
    .custom-option.has-machines .client-badge {
        background: linear-gradient(45deg, #e17055, #fd79a8) !important;
        color: white !important;
        font-weight: 800 !important;
        animation: machinesPulse 1.5s ease-in-out infinite alternate;
    }
    
    @keyframes machinesPulse {
        from { 
            transform: scale(1);
            box-shadow: 0 2px 8px rgba(225, 112, 85, 0.3);
        }
        to { 
            transform: scale(1.05);
            box-shadow: 0 4px 15px rgba(225, 112, 85, 0.6);
        }
    }
    
    /* Badge pour indiquer le type de client */
    .client-badge {
        display: inline-flex;
        align-items: center;
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 700;
        margin-left: 10px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }
    
    .client-badge-ci9 {
        background: linear-gradient(45deg, #2196f3, #1976d2);
        color: white;
        border: 2px solid #fff;
    }
    
    .client-badge-other {
        background: linear-gradient(45deg, #ffc107, #ff9800);
        color: #000;
        border: 2px solid #fff;
    }
    
    /* Animation pour les badges */
    .client-badge {
        animation: glow 2s ease-in-out infinite alternate;
    }
    
    @keyframes glow {
        from { box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); }
        to { box-shadow: 0 4px 15px rgba(33, 150, 243, 0.3); }
    }
    
    .client-badge-other {
        animation: glowYellow 2s ease-in-out infinite alternate;
    }
    
    @keyframes glowYellow {
        from { box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); }
        to { box-shadow: 0 4px 15px rgba(255, 193, 7, 0.4); }
    }
    
    /* Style pour les informations du BL sélectionné */
    .client-info-summary {
        background: linear-gradient(135deg, #f8f9fa 0%, #e3f2fd 100%);
        border-radius: 12px;
        padding: 20px;
        margin: 20px 0;
        border: 2px solid #2196f3;
        box-shadow: 0 6px 20px rgba(33, 150, 243, 0.15);
    }
    
    .client-info-summary.client-ci9 {
        background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
        border-color: #1976d2;
    }
    
    .client-info-summary.client-other {
        background: linear-gradient(135deg, #fff9c4 0%, #fff176 100%);
        border-color: #ff9800;
    }
    
    .client-info-summary h5 {
        color: #1976d2;
        margin-bottom: 15px;
        border-bottom: 2px solid #2196f3;
        padding-bottom: 10px;
        font-weight: 700;
    }
    
    .client-info-summary ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }
    
    .client-info-summary li {
        padding: 8px 0;
        border-bottom: 1px dotted #90caf9;
        display: flex;
        justify-content: space-between;
    }
    
    .client-info-summary li:last-child {
        border-bottom: none;
    }
    
    .client-info-summary strong {
        color: #1976d2;
        min-width: 140px;
        font-weight: 600;
    }
    
    #client-info-display {
        display: none;
        margin-bottom: 20px;
    }
    
    /* Scrollbar personnalisée pour les options */
    .custom-options::-webkit-scrollbar {
        width: 8px;
    }
    
    .custom-options::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 10px;
    }
    
    .custom-options::-webkit-scrollbar-thumb {
        background: linear-gradient(45deg, #2196f3, #ffc107);
        border-radius: 10px;
    }
    
    .custom-options::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(45deg, #1976d2, #ff9800);
    }
    
    /* Cases à cocher avec style amélioré */
    .checkbox-group {
        margin-top: 15px;
        padding: 10px;
        background-color: #f8f9fa;
        border-radius: 8px;
        border: 1px solid #dee2e6;
    }
    .checkbox-group-title {
        font-weight: 600;
        color: #495057;
        margin-bottom: 10px;
        padding-bottom: 5px;
        border-bottom: 1px solid #dee2e6;
    }
    .checkbox-container {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
    }
    .form-check {
        display: flex;
        align-items: center;
        padding: 8px 12px;
        background-color: #fff;
        border-radius: 6px;
        border: 1px solid #dee2e6;
        margin: 0;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    .form-check:hover {
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.15);
    }
    .form-check-input {
        margin-right: 8px;
        cursor: pointer;
    }
    .form-check-label {
        margin-bottom: 0;
        cursor: pointer;
    }
    .form-check-input:checked + .form-check-label {
        color: #007bff;
        font-weight: 500;
    }
    .pickingok-check {
        border-left: 4px solid #17a2b8;
    }
    .form-check-input[id="blencours_Pickingok"]:checked + .form-check-label {
        color: #17a2b8;
    }
    .pickingnok-check {
        border-left: 4px solid #dc3545;
    }
    .form-check-input[id="blencours_Pickingnok"]:checked + .form-check-label {
        color: #dc3545;
    }
</style>
{% endblock %}

{% block body %}
<div class="new-bl-container">
    <div class="page-title">
        <h1><i class="fas fa-plus-circle me-2"></i>Créer un nouveau BL</h1>
        <a href="{{ path('app_blencours_index') }}" class="btn-back">
            <i class="fas fa-arrow-left"></i> Retour à la liste
        </a>
    </div>
    
    {# Affichage des messages flash de succès #}
    {% for message in app.flashes('success') %}
        <div class="alert alert-success">
            <i class="fas fa-check-circle me-2"></i>{{ message }}
        </div>
    {% endfor %}
    
    {# Affichage des messages flash d'erreur #}
    {% for message in app.flashes('error') %}
        <div class="alert alert-danger">
            <i class="fas fa-exclamation-circle me-2"></i>{{ message }}
        </div>
    {% endfor %}
    
    <div class="help-section">
        <h5><i class="fas fa-info-circle me-2"></i>Conseils pour la création d'un BL</h5>
        <ul>
            <li>Vérifiez que le numéro de BL est unique et correspond au format attendu</li>
            <li>Tous les champs marqués d'un astérisque (*) sont obligatoires</li>
            <li>Le statut par défaut d'un nouveau BL est "En attente"</li>
            <li>Les clients commençant par "CI9" sont affichés en bleu, les autres en jaune</li>
            <li>Les BL se terminant par "_T" sont automatiquement filtrés</li>
        </ul>
    </div>
    
    {# Menu déroulant optimisé pour sélectionner un BL existant du jour #}
    <div class="bl-selector-container">
        <div class="bl-selector-title">
            <i class="fas fa-list-ul me-2"></i>BL disponibles aujourd'hui
            <span class="bl-count-badge">{{ (todayBlList|filter(bl => bl['No_Bl']|slice(-2) != '_T'))|length }}</span>
        </div>
        
        {# Menu déroulant personnalisé unique (pas de duplication) #}
        <div class="custom-select-wrapper">
            <div id="custom-select" class="custom-select">
                <div class="custom-select-trigger">
                    <span>-- Sélectionnez un BL existant pour pré-remplir --</span>
                </div>
                <div class="custom-options">
                    <div class="custom-option" data-value="" data-code-client="">
                        <span>-- Nouveau BL vide --</span>
                        <span class="client-badge client-badge-ci9">NOUVEAU</span>
                    </div>
                    {% set processedBls = [] %}
                    {% for bl in todayBlList %}
                        {# Filtrer les BL qui se terminent par "_T" et éviter les doublons #}
                        {% if bl['No_Bl']|slice(-2) != '_T' and bl['No_Bl'] not in processedBls %}
                            {% set processedBls = processedBls|merge([bl['No_Bl']]) %}
                            {% set client = bl['Client'] ? bl['Client'] : 'Client non spécifié' %}
                            {% set codeClient = bl['Code_Client'] ? bl['Code_Client'] : '' %}
                            {% set clientClass = codeClient|slice(0, 3) == 'CI9' ? 'client-ci9' : 'client-other' %}
                            {% set badgeClass = codeClient|slice(0, 3) == 'CI9' ? 'client-badge-ci9' : 'client-badge-other' %}
                            {% set badgeText = codeClient|slice(0, 3) == 'CI9' ? 'CI9' : 'STD' %}
                            {# Vérifier si le nom du client contient "machines" (insensible à la casse) #}
                            {% set hasMachines = client|lower matches '/.*machines.*/' %}
                            {% set machinesClass = hasMachines ? 'has-machines' : '' %}
                            
                            <div class="custom-option {{ clientClass }} {{ machinesClass }}" data-value="{{ bl['No_Bl'] }}" data-code-client="{{ codeClient }}">
                                <span>{{ bl['No_Bl'] }} - {{ client|slice(0, 35) }}{% if client|length > 35 %}...{% endif %}</span>
                                <span class="client-badge {{ badgeClass }}">
                                    {% if hasMachines %}
                                        <i class="fas fa-cogs me-1"></i>MACHINES
                                    {% else %}
                                        {{ badgeText }}
                                    {% endif %}
                                </span>
                            </div>
                        {% endif %}
                    {% endfor %}
                </div>
            </div>
        </div>
        
        <div class="mt-3 small text-muted">
            <i class="fas fa-lightbulb me-1"></i>
            <strong>Astuce :</strong> Sélectionnez un BL existant pour pré-remplir automatiquement le formulaire. Les BL se terminant par "_T" sont exclus.
        </div>
    </div>
    
    {# Div pour afficher les informations client #}
    <div id="client-info-display"></div>
    
    <div class="card">
        <div class="card-header">
            <h4><i class="fas fa-file-invoice me-2"></i>Informations du nouveau BL</h4>
        </div>
        <div class="card-body">
            {{ form_start(form, {'attr': {'id': 'bl-new-form'}}) }}
                <div class="form-section">
                    <div class="form-section-title">Informations générales</div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                {{ form_label(form.numBl) }}
                                {{ form_widget(form.numBl, {'attr': {'class': 'form-control'}}) }}
                                {{ form_errors(form.numBl) }}
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                {{ form_label(form.statut) }}
                                {{ form_widget(form.statut, {'attr': {'class': 'form-control'}}) }}
                                {{ form_errors(form.statut) }}
                            </div>
                        </div>
                    </div>
                    
                    {# Cases à cocher avec style amélioré #}
                    <div class="checkbox-group">
                        <div class="checkbox-group-title">
                            <i class="fas fa-tags me-2"></i>Statut de picking
                        </div>
                        <div class="checkbox-container">
                            <div class="form-check pickingok-check">
                                {{ form_widget(form.Pickingok, {'attr': {'checked': 'checked'}}) }}
                                {{ form_label(form.Pickingok) }}
                                <i class="fas fa-check ms-2 text-info"></i>
                            </div>
                            <div class="form-check pickingnok-check">
                                {{ form_widget(form.Pickingnok) }}
                                {{ form_label(form.Pickingnok) }}
                                <i class="fas fa-times ms-2 text-danger"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="action-buttons">
                    <a href="{{ path('app_blencours_index') }}" class="btn btn-secondary">Annuler</a>
                    <div class="d-flex align-items-center">
                        <button type="submit" class="btn btn-create">
                            <i class="fas fa-save me-2"></i>Créer le BL
                        </button>
                        <div class="loading-indicator">
                            <div class="spinner-border text-primary" role="status"></div>
                            <span>Création en cours...</span>
                        </div>
                    </div>
                </div>
            {{ form_end(form) }}
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Formulaire de création
        const form = document.getElementById('bl-new-form');
        const loadingIndicator = document.querySelector('.loading-indicator');
        
        if (form) {
            form.addEventListener('submit', function() {
                // Validation côté client
                const requiredFields = form.querySelectorAll('[required]');
                let isValid = true;
                
                requiredFields.forEach(field => {
                    if (!field.value.trim()) {
                        isValid = false;
                        field.classList.add('is-invalid');
                    } else {
                        field.classList.remove('is-invalid');
                    }
                });
                
                if (isValid) {
                    loadingIndicator.style.display = 'flex';
                } else {
                    return false;
                }
            });
        }
        
        // Gestion du menu déroulant personnalisé optimisé
        const customSelect = document.getElementById('custom-select');
        const customSelectTrigger = document.querySelector('.custom-select-trigger');
        const customOptions = document.querySelectorAll('.custom-option');
        
        if (customSelect && customSelectTrigger) {
            // Ouvrir/fermer le menu déroulant
            customSelectTrigger.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                customSelect.classList.toggle('opened');
            });
            
            // Fermer le menu déroulant lors d'un clic à l'extérieur
            document.addEventListener('click', function(e) {
                if (!customSelect.contains(e.target)) {
                    customSelect.classList.remove('opened');
                }
            });
            
            // Gestion des options
            customOptions.forEach(option => {
                option.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    // Retirer la classe selection de toutes les options
                    customOptions.forEach(opt => opt.classList.remove('selection'));
                    
                    // Ajouter la classe selection à l'option sélectionnée
                    this.classList.add('selection');
                    
                    // Mettre à jour le texte affiché
                    const selectedText = this.querySelector('span').textContent;
                    customSelectTrigger.querySelector('span').textContent = selectedText;
                    
                    // Fermer le menu
                    customSelect.classList.remove('opened');
                    
                    // Récupérer les données du BL sélectionné
                    const blNumber = this.getAttribute('data-value');
                    const codeClient = this.getAttribute('data-code-client');
                    
                    // Traitement selon la sélection
                    if (blNumber === '') {
                        // Option "Nouveau BL vide" - réinitialiser le formulaire
                        resetForm();
                    } else {
                        // BL sélectionné - charger ses données
                        loadBlData(blNumber, codeClient);
                    }
                });
            });
        }
        
        // Fonction pour réinitialiser le formulaire
        function resetForm() {
            const numBlField = document.getElementById('blencours_numBl');
            const statutField = document.getElementById('blencours_statut');
            const pickingokField = document.getElementById('blencours_Pickingok');
            const pickingnokField = document.getElementById('blencours_Pickingnok');
            
            // Réinitialiser tous les champs
            if (numBlField) numBlField.value = '';
            if (statutField) statutField.value = 'En attente';
            // Picking OK coché par défaut, Picking NOK décoché
            if (pickingokField) pickingokField.checked = true;
            if (pickingnokField) pickingnokField.checked = false;
            
            // Cacher les informations client
            hideClientInfo();
            
            // Supprimer les avertissements
            removeWarnings();
        }
        
        // Fonction pour charger les données d'un BL
        function loadBlData(blNumber, codeClient) {
            if (!blNumber) return;
            
            // Afficher l'indicateur de chargement
            showLoading(true);
            
            // Remplir directement le champ numBl avec la valeur sélectionnée
            const numBlField = document.getElementById('blencours_numBl');
            if (numBlField) {
                numBlField.value = blNumber;
                // Déclencher un événement change
                numBlField.dispatchEvent(new Event('change'));
            }
            
            // Requête AJAX pour récupérer les données du BL sélectionné
            Promise.all([
                fetch(`/blencours/get-bl-data/${encodeURIComponent(blNumber)}`),
                fetch(`/blencours/check-bl-exists/${encodeURIComponent(blNumber)}`)
            ])
            .then(async ([dataResponse, existsResponse]) => {
                const data = await dataResponse.json();
                const existsData = await existsResponse.json();
                
                if (data.success && data.data.length > 0) {
                    const blData = data.data[0];
                    console.log('Données récupérées:', blData);
                    
                    // Pré-remplir le formulaire avec les données du BL
                    fillFormWithBlData(blData);
                    
                    // Afficher les informations client
                    displayClientInfo(blData, codeClient);
                    
                    // Vérifier si le BL existe déjà
                    if (existsData.exists) {
                        showExistingBlWarning();
                    } else {
                        removeWarnings();
                    }
                } else {
                    hideClientInfo();
                    removeWarnings();
                }
                
                showLoading(false);
            })
            .catch(error => {
                console.error('Erreur lors de la récupération des données du BL:', error);
                showLoading(false);
                hideClientInfo();
                showError('Erreur lors du chargement des données du BL');
            });
        }
        
        // Fonction pour remplir le formulaire avec les données du BL
        function fillFormWithBlData(blData) {
            // Statut
            const statutField = document.getElementById('blencours_statut');
            if (statutField) {
                statutField.value = blData.Statut_Cde || 'En attente';
            }
            
            // Cases à cocher avec logique intelligente
            const pickingokField = document.getElementById('blencours_Pickingok');
            const pickingnokField = document.getElementById('blencours_Pickingnok');
            
            // Logique pour Picking OK
            if (pickingokField && blData.Client) {
                const clientUpper = blData.Client.toUpperCase();
                pickingokField.checked = clientUpper.includes('OK') || 
                                       clientUpper.includes('VALID') || 
                                       clientUpper.includes('COMPLET');
                pickingokField.dispatchEvent(new Event('change'));
            }
            
            // Logique pour Picking NOK
            if (pickingnokField && (blData.Statut_Cde || blData.Transporteur)) {
                const statusUpper = (blData.Statut_Cde || '').toUpperCase();
                const transportUpper = (blData.Transporteur || '').toUpperCase();
                pickingnokField.checked = statusUpper.includes('NOK') || 
                                        statusUpper.includes('ERREUR') || 
                                        transportUpper.includes('ERREUR') ||
                                        statusUpper.includes('ANNULE');
                pickingnokField.dispatchEvent(new Event('change'));
            }
        }
        
        // Fonction pour afficher les informations client
        function displayClientInfo(blData, codeClient) {
            const clientInfoDiv = document.getElementById('client-info-display');
            if (!clientInfoDiv) return;
            
            // Déterminer les classes CSS selon le Code_Client
            const isCI9 = codeClient && codeClient.startsWith('CI9');
            const clientClass = isCI9 ? 'client-ci9' : 'client-other';
            const clientBadgeClass = isCI9 ? 'client-badge-ci9' : 'client-badge-other';
            const clientBadgeText = isCI9 ? 'Client CI9' : 'Client Standard';
            
            const clientInfoHtml = `
                <div class="client-info-summary ${clientClass}">
                    <h5>
                        <i class="fas fa-info-circle me-2"></i>
                        Informations du BL ${blData.No_Bl}
                        <span class="client-badge ${clientBadgeClass}">${clientBadgeText}</span>
                    </h5>
                    <ul>
                        <li>
                            <strong>Client :</strong> 
                            <span>${blData.Client || '--'}</span>
                        </li>
                        <li>
                            <strong>Code Client :</strong> 
                            <span>${blData.Code_Client || '--'}</span>
                        </li>
                        <li>
                            <strong>Transporteur :</strong> 
                            <span>${blData.Transporteur || '--'}</span>
                        </li>
                        <li>
                            <strong>Statut commande :</strong> 
                            <span>${blData.Statut_Cde || '--'}</span>
                        </li>
                        <li>
                            <strong>Num. commande :</strong> 
                            <span>${blData.No_Cmd || '--'}</span>
                        </li>
                        <li>
                            <strong>Date livraison :</strong> 
                            <span>${blData.Date_liv || '--'}</span>
                        </li>
                        <li>
                            <strong>Préparateur :</strong> 
                            <span>${blData.Preparateur || '--'}</span>
                        </li>
                    </ul>
                </div>
            `;
            
            clientInfoDiv.innerHTML = clientInfoHtml;
            clientInfoDiv.style.display = 'block';
            
            // Animation d'apparition
            clientInfoDiv.style.opacity = '0';
            clientInfoDiv.style.transform = 'translateY(-20px)';
            setTimeout(() => {
                clientInfoDiv.style.transition = 'all 0.3s ease';
                clientInfoDiv.style.opacity = '1';
                clientInfoDiv.style.transform = 'translateY(0)';
            }, 50);
        }
        
        // Fonction pour cacher les informations client
        function hideClientInfo() {
            const clientInfoDiv = document.getElementById('client-info-display');
            if (clientInfoDiv) {
                clientInfoDiv.style.display = 'none';
                clientInfoDiv.innerHTML = '';
            }
        }
        
        // Fonction pour afficher l'avertissement BL existant
        function showExistingBlWarning() {
            removeWarnings(); // Supprimer les anciens avertissements
            
            const numBlField = document.getElementById('blencours_numBl');
            if (!numBlField) return;
            
            const warning = document.createElement('div');
            warning.className = 'alert alert-warning mt-3 bl-exists-warning';
            warning.innerHTML = `
                <i class="fas fa-exclamation-triangle me-2"></i>
                <strong>Attention :</strong> Ce numéro de BL existe déjà dans la base de données. 
                Créer un nouveau BL avec ce numéro créera un doublon.
            `;
            
            const numBlParent = numBlField.closest('.form-group');
            if (numBlParent) {
                numBlParent.appendChild(warning);
            }
        }
        
        // Fonction pour supprimer les avertissements
        function removeWarnings() {
            const warnings = document.querySelectorAll('.alert-warning.bl-exists-warning');
            warnings.forEach(warning => warning.remove());
        }
        
        // Fonction pour afficher/masquer l'indicateur de chargement
        function showLoading(show) {
            if (loadingIndicator) {
                loadingIndicator.style.display = show ? 'flex' : 'none';
            }
        }
        
        // Fonction pour afficher les erreurs
        function showError(message) {
            // Créer et afficher un message d'erreur temporaire
            const errorDiv = document.createElement('div');
            errorDiv.className = 'alert alert-danger mt-3';
            errorDiv.innerHTML = `<i class="fas fa-exclamation-circle me-2"></i>${message}`;
            
            const container = document.querySelector('.new-bl-container');
            if (container) {
                container.insertBefore(errorDiv, container.firstChild);
                
                // Supprimer après 5 secondes
                setTimeout(() => {
                    errorDiv.remove();
                }, 5000);
            }
        }
        
        // Améliorations UX supplémentaires
        
        // Animation des boutons
        const buttons = document.querySelectorAll('.btn, .custom-select-trigger');
        buttons.forEach(button => {
            button.addEventListener('mousedown', function() {
                this.style.transform = 'scale(0.98)';
            });
            button.addEventListener('mouseup', function() {
                this.style.transform = 'scale(1)';
            });
            button.addEventListener('mouseleave', function() {
                this.style.transform = 'scale(1)';
            });
        });
        
        // Mettre en évidence les champs obligatoires
        const labels = document.querySelectorAll('label');
        labels.forEach(label => {
            const input = document.getElementById(label.getAttribute('for'));
            if (input && input.hasAttribute('required')) {
                label.closest('.form-group').classList.add('required-field');
            }
        });
        
        // Fermer le menu avec la touche Échap
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && customSelect) {
                customSelect.classList.remove('opened');
            }
        });
        
        // Améliorer l'accessibilité du menu déroulant
        if (customSelectTrigger) {
            customSelectTrigger.setAttribute('role', 'button');
            customSelectTrigger.setAttribute('aria-haspopup', 'listbox');
            customSelectTrigger.setAttribute('aria-expanded', 'false');
            customSelectTrigger.setAttribute('tabindex', '0');
            
            // Navigation au clavier
            customSelectTrigger.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    this.click();
                }
            });
        }
        
        // Ajouter des attributs d'accessibilité aux options
        customOptions.forEach((option, index) => {
            option.setAttribute('role', 'option');
            option.setAttribute('tabindex', '-1');
            option.setAttribute('id', `option-${index}`);
        });
        
        // Observer les changements d'état du menu
        if (customSelect) {
            const observer = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.attributeName === 'class') {
                        const isOpen = customSelect.classList.contains('opened');
                        customSelectTrigger.setAttribute('aria-expanded', isOpen);
                    }
                });
            });
            
            observer.observe(customSelect, {
                attributes: true,
                attributeFilter: ['class']
            });
        }
        
        console.log('Menu déroulant BL optimisé initialisé avec succès');
    });
</script>
{% endblock %}