{# templates/excel_download/index.html.twig #}

{% extends 'base.html.twig' %}

{% block title %}Téléchargement d'Excel{% endblock %}

{% block body %}
    <div class="container mt-5">
        <h1>Téléchargement du rapport Excel</h1>
        
        {% for type, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ type }}">
                    {{ message }}
                </div>
            {% endfor %}
        {% endfor %}
        
        <div class="card">
            <div class="card-body">
                <div id="download-controls">
                    <button id="start-download" class="btn btn-primary">Démarrer le téléchargement</button>
                    <button id="direct-download" class="btn btn-secondary">Téléchargement direct (synchrone)</button>
                </div>
                
                <div id="download-progress" style="display: none;">
                    <div class="progress mt-3">
                        <div class="progress-bar" role="progressbar" style="width: 0%;" 
                             id="progress-bar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
                    </div>
                    <p id="status-message" class="mt-2">Initialisation...</p>
                    
                    <div id="download-complete" style="display: none;">
                        <a href="#" id="download-link" class="btn btn-success mt-3">Télécharger le fichier</a>
                    </div>
                    
                    <div id="download-error" style="display: none;">
                        <div class="alert alert-danger mt-3" id="error-message"></div>
                        <button id="retry-download" class="btn btn-warning">Réessayer</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        let downloadId = null;
        let checkStatusInterval = null;
        
        function startDownload() {
            document.getElementById('download-controls').style.display = 'none';
            document.getElementById('download-progress').style.display = 'block';
            document.getElementById('download-complete').style.display = 'none';
            document.getElementById('download-error').style.display = 'none';
            
            document.getElementById('progress-bar').style.width = '0%';
            document.getElementById('progress-bar').setAttribute('aria-valuenow', 0);
            document.getElementById('progress-bar').textContent = '0%';
            document.getElementById('status-message').textContent = 'Initialisation...';
            
            fetch('{{ path('excel_start_download') }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if(data.status === 'started' || data.status === 'processing') {
                    downloadId = data.downloadId;
                    checkStatus();
                    checkStatusInterval = setInterval(checkStatus, 2000);
                } else {
                    showError(data.message || 'Erreur lors du démarrage du téléchargement');
                }
            })
            .catch(error => {
                showError('Erreur de communication avec le serveur: ' + error);
            });
        }
        
        function checkStatus() {
            if(!downloadId) return;
            
            fetch(`{{ path('excel_check_status', {'downloadId': 'PLACEHOLDER'}) }}`.replace('PLACEHOLDER', downloadId))
            .then(response => {
                if (!response.ok) {
                    throw new Error('Réponse du serveur non valide: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                updateProgress(data);
                
                if(data.status === 'completed') {
                    clearInterval(checkStatusInterval);
                    showComplete(downloadId);
                } else if(data.status === 'error') {
                    clearInterval(checkStatusInterval);
                    showError(data.error || 'Une erreur est survenue');
                }
            })
            .catch(error => {
                clearInterval(checkStatusInterval);
                showError('Erreur lors de la vérification du statut: ' + error);
            });
        }
        
        function updateProgress(data) {
            const progressBar = document.getElementById('progress-bar');
            const statusMessage = document.getElementById('status-message');
            
            if(data.progress >= 0) {
                progressBar.style.width = data.progress + '%';
                progressBar.setAttribute('aria-valuenow', data.progress);
                progressBar.textContent = data.progress + '%';
            }
            
            if(data.message) {
                statusMessage.textContent = data.message;
            }
        }
        
        function showComplete(downloadId) {
            document.getElementById('download-complete').style.display = 'block';
            document.getElementById('download-link').href = 
                `{{ path('excel_get_file', {'downloadId': 'PLACEHOLDER'}) }}`.replace('PLACEHOLDER', downloadId);
        }
        
        function showError(message) {
            document.getElementById('download-error').style.display = 'block';
            document.getElementById('error-message').textContent = message;
        }
        
        document.getElementById('start-download').addEventListener('click', startDownload);
        document.getElementById('direct-download').addEventListener('click', function() {
            window.location.href = '{{ path('excel_direct_download') }}';
        });
        document.getElementById('retry-download').addEventListener('click', startDownload);
    });
</script>
{% endblock %}