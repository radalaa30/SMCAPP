{# templates/suividupreparationdujour/stats.html.twig #}
{% extends 'base3.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .stats-container { padding: 20px; }
        .stats-section {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        .stats-header {
            border-bottom: 2px solid #eee;
            padding-bottom: 10px;
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .refresh-button {
            font-size: 0.9em;
            padding: 5px 15px;
        }
        .progress {
            height: 20px;
            background-color: #f5f5f5;
            border-radius: 4px;
            margin: 5px 0;
            overflow: hidden;
        }
        .progress-bar {
            height: 100%;
            border-radius: 4px;
            transition: width 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 12px;
        }
        .progress-bar.warning { background-color: #FFA726; }
        .progress-bar.danger { background-color: #EF5350; }
        .stats-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 15px;
        }
        .stats-table th,
        .stats-table td {
            padding: 12px;
            border: 1px solid #ddd;
            text-align: left;
        }
        .stats-table th {
            background-color: #f8f9fa;
            font-weight: bold;
            position: sticky;
            top: 0;
            z-index: 10;
        }
        .stats-table tr:nth-child(even) { background-color: #f9f9f9; }
        .agence-row { background-color: #e3f2fd !important; }
        .gsb-row { background-color: #ffe0b2 !important; }
        .gsb-lm-row { background-color: #ffccbc !important; }
        .chart-container { height: 400px; margin-top: 20px; }
        .stats-card {
            background: #fff;
            border-radius: 8px;
            padding: 15px;
            margin: 10px 0;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            transition: transform 0.2s ease;
        }
        .stats-card:hover { transform: translateY(-2px); }
        .stats-value {
            font-size: 24px;
            font-weight: bold;
            color: #2196F3;
        }
        .stats-label { color: #666; }
        .table-responsive { max-height: 500px; overflow-y: auto; }
        .update-box {
            border: 2px solid #3498db;
            background-color: #ebf5fb;
            padding: 10px;
            border-radius: 5px;
            display: inline-block;
            color: #2874a6;
        }
        .preparateur-badge {
            display: inline-block;
            padding: 4px 8px;
            background-color: #e9ecef;
            border-radius: 4px;
            margin: 2px;
            font-size: 0.9em;
        }
        .ligne-suspendus {
            background-color: #ffc107 !important;
            color: #000 !important;
            font-weight: bold;
        }
    </style>
{% endblock %}

{% block body %}
<div class="stats-container">
    {# En-tête #}
{# Header du tableau de bord #}
<section class="stats-section">
  <header class="stats-header d-flex align-items-center justify-content-between flex-wrap gap-2">
    <div class="d-flex align-items-center gap-3">
      <h2 class="m-0">Tableau de bord des préparations</h2>

      {% if lastUpdatedAt %}
        <span class="last-updated update-box m-0" aria-live="polite">
          Dernière mise à jour :
          <time datetime="{{ lastUpdatedAt|date('c') }}">
            {{ lastUpdatedAt|date('d/m/Y H:i') }}
          </time>
        </span>
      {% endif %}
    </div>

    <div class="d-flex gap-2">
      <button type="button" class="btn btn-primary refresh-button" id="refreshBtn" title="Recharger les données">
        <i class="fas fa-sync-alt me-1" aria-hidden="true"></i>
        Actualiser
      </button>
    </div>
  </header>
</section>


    {# Vue d'ensemble #}
<div class="stats-section">
        <h2 class="stats-header">Vue d'ensemble</h2>

        {# >>> totaux transport pour le donut #}
        {% set totalTermineesTransport = 0 %}
        {% for v in dataTransporteurs.terminees %}
            {% set totalTermineesTransport = totalTermineesTransport + v %}
        {% endfor %}
        {% set totalEnCoursTransport = 0 %}
        {% for v in dataTransporteurs.enCours %}
            {% set totalEnCoursTransport = totalEnCoursTransport + v %}
        {% endfor %}
        {# <<< #}

        <div class="row g-4">
            <div class="col-md-2">
                <div class="stats-card">
                    <h4 class="mb-3">Total préparations</h4>
                    <div class="stats-value">{{ statsGlobales.total_preparations }}</div>
                    <div class="stats-label">Lignes à traiter</div>
                </div>
            </div>

            <div class="col-md-2">
                <div class="stats-card">
                    <h4 class="mb-3">Terminées</h4>
                    <div class="stats-value text-success">{{ statsGlobales.preparations_terminees }}</div>
                    <div class="progress mt-3">
                        <div class="progress-bar {% if statsGlobales.pourcentage_avancement < 50 %}bg-warning{% elseif statsGlobales.pourcentage_avancement < 80 %}bg-warning{% else %}bg-success{% endif %}"
                             style="width: {{ statsGlobales.pourcentage_avancement }}%">
                            {{ statsGlobales.pourcentage_avancement }}%
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-2">
                <div class="stats-card">
                    <h4 class="mb-3">Clients</h4>
                    <div class="mb-3">
                        <h5>Total Préparations</h5>
                        <div class="stats-value">{{ statsGlobales.total_preparations_client }}</div>
                    </div>
                    <div>
                        <h5>Reste à préparer</h5>
                        <div class="stats-value">{{ statsGlobales.preparations_client_en_cours }}</div>
                    </div>
                </div>
            </div>

           {# >>> Carte Transporteurs élargie avec donuts individuels #}
            <div class="col-md-4">
            <div class="stats-card">
                <h4 class="mb-1">Transporteurs</h4>
                <small class="text-muted">Terminées vs En cours</small>

                <div class="chart-container" style="max-height: 400px; overflow-y: auto; margin-top: 10px;">
                <div class="row">
                    {% for stat in statsTransporteur %}
                    <div class="col-md-6" style="margin-bottom:20px; text-align:center;">
                        <strong style="font-size:0.9em;">{{ stat.Transporteur ?? 'Inconnu' }}</strong>
                        <div style="height:120px; margin-top:5px;">
                        <canvas id="donut-{{ loop.index }}"></canvas>
                        </div>
                    </div>
                    {% else %}
                    <p class="text-muted">Aucun transporteur</p>
                    {% endfor %}
                </div>
                </div>
            </div>
            </div>
            {# <<< fin remplacement #}
            <div class="col-md-2">
                <div class="stats-card">
                    <h4 class="mb-3">Agences</h4>
                    <div class="mb-3">
                        <h5>Total Préparations</h5>
                        <div class="stats-value">{{ statsGlobales.total_preparations_agence }}</div>
                    </div>
                    <div>
                        <h5>Reste à préparer</h5>
                        <div class="stats-value">{{ statsGlobales.preparations_agence_en_cours }}</div>
                        <p style="font-style: italic; font-size: 1em;">Dont KO Agences: {{ preparationsAgenceStatusKO }}</p>
                        <p style="font-style: italic; font-size: 1em; color: #ffc107;">
                            <i class="fas fa-pause-circle"></i> Lignes suspendues: {{ preparationsNonFlasheAvecDate }}
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    {# Performance des préparateurs #}
    <div class="stats-section">
        <h2 class="stats-header">Performance des Préparateurs</h2>
        <div class="chart-container">
            <canvas id="preparateursChart"></canvas>
        </div>
    </div>

    {# Performance des agences #}
    <div class="stats-section">
        <h2 class="stats-header">Performance des Agences</h2>
        <div class="chart-container">
            <canvas id="agencesChart"></canvas>
        </div>
    </div>

    {# Transporteurs #}
    <div class="stats-section">
        <h2 class="stats-header">Transporteurs</h2>
        <div class="chart-container">
            <canvas id="transporteursChart"></canvas>
        </div>
    </div>

    {# Statistiques par Préparateur #}
    <div class="stats-section">
        <h2 class="stats-header">Statistiques par Préparateur</h2>
        <div class="table-responsive">
            <table class="stats-table">
                <thead>
                    <tr>
                        <th>Préparateur</th>
                        <th>Total</th>
                        <th>Terminées</th>
                        <th>En cours</th>   
                        <th>Avancement</th>
                    </tr>
                </thead>
                <tbody>
                    {% for stat in statsPreparateur %}
                        <tr class="{% if stat.Preparateur == 'Ligne suspendus' %}ligne-suspendus{% endif %}">
                            <td>
                                {% if stat.Preparateur == 'Ligne suspendus' %}
                                    <i class="fas fa-pause-circle"></i> {{ stat.Preparateur }}
                                {% else %}
                                    {{ stat.Preparateur }}
                                {% endif %}
                            </td>
                            <td>{{ stat.total_preparations }}</td>
                            <td class="text-success">{{ stat.preparations_terminees }}</td>
                            <td class="text-primary">{{ stat.preparations_en_cours }}</td>
                            <td>
                                <div class="progress">
                                    <div class="progress-bar {% if stat.pourcentage_avancement < 50 %}warning{% elseif stat.pourcentage_avancement < 80 %}bg-warning{% else %}bg-success{% endif %}"
                                         style="width: {{ stat.pourcentage_avancement }}%">
                                        {{ stat.pourcentage_avancement }}%
                                    </div>
                                </div>
                            </td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>

    {# Statistiques par Agence #}
    <div class="stats-section">
        <h2 class="stats-header">Statistiques par Agence</h2>
        <div class="table-responsive">
            <table class="stats-table">
                <thead>
                    <tr>
                        <th>Agence</th>
                        <th>Code</th>
                        <th>Préparateurs</th>
                        <th>Total</th>
                        <th>Terminées</th>
                        <th>En cours</th>
                        <th>Avancement</th>
                    </tr>
                </thead>
                <tbody>
                    {% for stat in statsAgence %}
                        <tr class="agence-row">
                            <td>{{ stat.Client }}</td>
                            <td>{{ stat.Code_Client }}</td>
                            <td>
                                {% if stat.preparateurs is defined %}
                                    {% for preparateur in stat.preparateurs %}
                                        <span class="preparateur-badge">{{ preparateur }}</span>
                                    {% endfor %}
                                {% endif %}
                            </td>
                            <td>{{ stat.total_preparations }}</td>
                            <td>{{ stat.preparations_terminees }}</td>
                            <td>{{ stat.preparations_en_cours }}</td>
                            <td>
                                <div class="progress">
                                    <div class="progress-bar {% if stat.pourcentage_avancement < 50 %}warning{% elseif stat.pourcentage_avancement < 80 %}bg-warning{% else %}bg-success{% endif %}"
                                         style="width: {{ stat.pourcentage_avancement }}%">
                                        {{ stat.pourcentage_avancement }}%
                                    </div>
                                </div>
                            </td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>

    {# Statistiques par Transporteur #}
    <div class="stats-section">
        <h2 class="stats-header">Statistiques par Transporteur</h2>
        <div class="table-responsive">
            <table class="stats-table">
                <thead>
                    <tr>
                        <th>Transporteur</th>
                        <th>Total</th>
                        <th>Terminées</th>
                        <th>En cours</th>
                        <th>Avancement</th>
                    </tr>
                </thead>
                <tbody>
                    {% for stat in statsTransporteur %}
                        <tr>
                            <td>{{ stat.Transporteur ?? 'Inconnu' }}</td>
                            <td>{{ stat.total_preparations }}</td>
                            <td>{{ stat.preparations_terminees }}</td>
                            <td>{{ stat.preparations_en_cours }}</td>
                            <td>
                                <div class="progress">
                                    <div class="progress-bar {% if stat.pourcentage_avancement < 50 %}warning{% elseif stat.pourcentage_avancement < 80 %}bg-warning{% else %}bg-success{% endif %}"
                                         style="width: {{ stat.pourcentage_avancement }}%">
                                        {{ stat.pourcentage_avancement }}%
                                    </div>
                                </div>
                            </td>
                        </tr>
                    {% else %}
                        <tr><td colspan="5" class="text-center text-muted">Aucune donnée transporteur aujourd'hui.</td></tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // --------- Préparateurs
        const ctxPreparateurs = document.getElementById('preparateursChart');
        const statsPreparateur = {{ statsPreparateur|json_encode|raw }};
        const suspenduesData = {{ dataPreparateurs.labels|json_encode|raw }}.map(label => {
            if (label === 'Ligne suspendus') {
                const stat = statsPreparateur.find(s => s.Preparateur === 'Ligne suspendus');
                return stat ? stat.total_preparations : 0;
            }
            return 0;
        });

        new Chart(ctxPreparateurs, {
            type: 'bar',
            data: {
                labels: {{ dataPreparateurs.labels|json_encode|raw }},
                datasets: [
                    {
                        label: 'Préparations Client',
                        data: {{ dataPreparateurs.termineesClient|json_encode|raw }},
                        backgroundColor: 'rgba(165, 181, 64, 0.8)',
                        borderColor: 'rgba(165, 181, 64, 0.8)',
                        borderWidth: 1
                    },
                   
                    {
                        label: 'Préparations Agence',
                        data: {{ dataPreparateurs.termineesAgence|json_encode|raw }},
                        backgroundColor: 'rgba(55, 55, 225, 0.8)',
                        borderColor: 'rgba(55, 55, 225, 0.8)',
                        borderWidth: 1
                    },
                    {
                        label: 'Lignes Suspendues',
                        data: suspenduesData,
                        backgroundColor: 'rgba(255, 193, 7, 0.8)',
                        borderColor: 'rgba(255, 193, 7, 1)',
                        borderWidth: 2
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: { mode: 'index', intersect: false },
                plugins: {
                    legend: { position: 'top', labels: { padding: 20 } },
                    tooltip: {
                        callbacks: {
                            afterBody: function(context) {
                                const index = context[0].dataIndex;
                                const pourcentages = {{ dataPreparateurs.pourcentages|json_encode|raw }};
                                const totalClientStandard = ({{ dataPreparateurs.termineesClient|json_encode|raw }}[index] || 0) + ({{ dataPreparateurs.enCoursClient|json_encode|raw }}[index] || 0);
                                const totalClientGSBLM = ({{ dataPreparateurs.termineesClientGSBLM|json_encode|raw }}[index] || 0) + ({{ dataPreparateurs.enCoursClientGSBLM|json_encode|raw }}[index] || 0);
                                const totalClientGSBAutres = ({{ dataPreparateurs.termineesClientGSBAutres|json_encode|raw }}[index] || 0) + ({{ dataPreparateurs.enCoursClientGSBAutres|json_encode|raw }}[index] || 0);
                                const totalAgence = ({{ dataPreparateurs.termineesAgence|json_encode|raw }}[index] || 0) + ({{ dataPreparateurs.enCoursAgence|json_encode|raw }}[index] || 0);
                                const suspendues = suspenduesData[index] || 0;

                                return [
                                    `Taux d'avancement: ${pourcentages[index] || 0}%`,
                                    `Total Client Standard: ${totalClientStandard}`,
                                    
                                   
                                    `Total Agence: ${totalAgence}`,
                                    `Lignes Suspendues: ${suspendues}`,
                                    `Total Global: ${totalClientStandard + totalClientGSBLM + totalClientGSBAutres + totalAgence + suspendues}`
                                ];
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        stacked: true,
                        grid: { display: false },
                        ticks: { maxRotation: 45, minRotation: 45 }
                    },
                    y: {
                        stacked: true,
                        beginAtZero: true,
                        grid: { color: 'rgba(0, 0, 0, 0.1)' }
                    }
                }
            }
        });

        // --------- Agences
        const ctxAgences = document.getElementById('agencesChart');
        new Chart(ctxAgences, {
            type: 'bar',
            data: {
                labels: {{ dataAgences.labels|json_encode|raw }},
                datasets: [
                    {
                        label: 'Préparations terminées',
                        data: {{ dataAgences.terminees|json_encode|raw }},
                        backgroundColor: 'rgba(33, 150, 243, 0.8)',
                        borderColor: 'rgba(33, 150, 243, 1)',
                        borderWidth: 1
                    },
                    {
                        label: 'En cours',
                        data: {{ dataAgences.enCours|json_encode|raw }},
                        backgroundColor: 'rgba(255, 167, 38, 0.8)',
                        borderColor: 'rgba(255, 167, 38, 1)',
                        borderWidth: 1
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: { mode: 'index', intersect: false },
                plugins: {
                    legend: { position: 'top' },
                    tooltip: {
                        callbacks: {
                            afterBody: function(context) {
                                const index = context[0].dataIndex;
                                const pourcentages = {{ dataAgences.pourcentages|json_encode|raw }};
                                const terminees = ({{ dataAgences.terminees|json_encode|raw }}[index] || 0);
                                const enCours = ({{ dataAgences.enCours|json_encode|raw }}[index] || 0);
                                const total = terminees + enCours;
                                return [
                                    `Taux d'avancement: ${pourcentages[index] || 0}%`,
                                    `Total: ${total}`
                                ];
                            }
                        }
                    }
                },
                scales: {
                    x: { stacked: true, grid: { display: false } },
                    y: { stacked: true, beginAtZero: true, grid: { color: 'rgba(0, 0, 0, 0.1)' } }
                }
            }
        });

        // --------- Transporteurs (bar)
        const ctxTransporteurs = document.getElementById('transporteursChart');
        new Chart(ctxTransporteurs, {
            type: 'bar',
            data: {
                labels: {{ dataTransporteurs.labels|json_encode|raw }},
                datasets: [
                    {
                        label: 'Terminées',
                        data: {{ dataTransporteurs.terminees|json_encode|raw }},
                        backgroundColor: 'rgba(76, 175, 80, 0.8)',
                        borderColor: 'rgba(76, 175, 80, 1)',
                        borderWidth: 1
                    },
                    {
                        label: 'En cours',
                        data: {{ dataTransporteurs.enCours|json_encode|raw }},
                        backgroundColor: 'rgba(255, 193, 7, 0.8)',
                        borderColor: 'rgba(255, 193, 7, 1)',
                        borderWidth: 1
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: { mode: 'index', intersect: false },
                plugins: {
                    legend: { position: 'top' },
                    tooltip: {
                        callbacks: {
                            afterBody: function(context) {
                                const index = context[0].dataIndex;
                                const pourcentages = {{ dataTransporteurs.pourcentages|json_encode|raw }};
                                const t = ({{ dataTransporteurs.terminees|json_encode|raw }}[index] || 0);
                                const e = ({{ dataTransporteurs.enCours|json_encode|raw }}[index] || 0);
                                const total = t + e;
                                return [
                                    `Taux d'avancement: ${pourcentages[index] || 0}%`,
                                    `Total: ${total}`
                                ];
                            }
                        }
                    }
                },
                scales: {
                    x: { stacked: true, grid: { display: false } },
                    y: { stacked: true, beginAtZero: true, grid: { color: 'rgba(0,0,0,0.1)' } }
                }
            }
        });
        
        // --------- Mini donuts par transporteur (dans la carte latérale)
const statsTransporteurs = {{ statsTransporteur|json_encode|raw }};

statsTransporteurs.forEach((stat, index) => {
  const canvas = document.getElementById(`donut-${index+1}`);
  if (!canvas) return;

  const terminees = stat.preparations_terminees || 0;
  const enCours = stat.preparations_en_cours || 0;
  const total = terminees + enCours;

  new Chart(canvas, {
    type: 'doughnut',
    data: {
      labels: ['Terminées', 'En cours'],
      datasets: [{
        data: [terminees, enCours],
        backgroundColor: [
          'rgba(76, 175, 80, 0.85)',   // vert
          'rgba(255, 193, 7, 0.85)'    // jaune
        ],
        borderColor: [
          'rgba(76, 175, 80, 1)',
          'rgba(255, 193, 7, 1)'
        ],
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      cutout: '70%',
      plugins: {
        legend: { display: false },
        tooltip: {
          callbacks: {
            label: (ctx) => {
              const val = ctx.raw || 0;
              const pct = total ? ((val / total) * 100).toFixed(1) : 0;
              return `${ctx.label}: ${val} (${pct}%)`;
            }
          }
        }
      }
    }
  });
});
        // --------- Donut Transport (terminées vs en cours) — remplace LM card
        const donutEl = document.getElementById('transportDonut');
        if (donutEl) {
          const totalTermineesTransport = {{ totalTermineesTransport }};
          const totalEnCoursTransport = {{ totalEnCoursTransport }};
          const totalTransport = totalTermineesTransport + totalEnCoursTransport;

          new Chart(donutEl, {
            type: 'doughnut',
            data: {
              labels: ['Terminées', 'En cours'],
              datasets: [{
                data: [totalTermineesTransport, totalEnCoursTransport],
                backgroundColor: [
                  'rgba(76, 175, 80, 0.85)',   // vert
                  'rgba(255, 193, 7, 0.85)'    // jaune
                ],
                borderColor: [
                  'rgba(76, 175, 80, 1)',
                  'rgba(255, 193, 7, 1)'
                ],
                borderWidth: 1
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              cutout: '70%',
              plugins: {
                legend: { display: false },
                tooltip: {
                  callbacks: {
                    label: (ctx) => {
                      const val = ctx.raw || 0;
                      const pct = totalTransport ? ((val / totalTransport) * 100).toFixed(1) : 0;
                      return `${ctx.label}: ${val} (${pct}%)`;
                    }
                  }
                }
              }
            }
          });
        }
      });
    </script>
{% endblock %}
